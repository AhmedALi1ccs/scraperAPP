name: Build Desktop Apps
#
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-macos-arm64:
    runs-on: macos-14
    
    steps:
    - name: Clean up disk space
      run: |
        df -h
        sudo rm -rf /Library/Developer/CommandLineTools
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /Users/runner/.gradle
        brew cleanup
        df -h
    
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file
      env:
        GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      run: |
        echo "GOOGLE_CREDENTIALS_JSON='$GOOGLE_CREDENTIALS_JSON'" > .env
        
    - name: Build Mac app (ARM64)
      run: |
        # Clean any previous builds
        rm -rf build dist
        
        # Create spec file for PyInstaller
        cat > LogProcessor.spec << EOL
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None

        a = Analysis(
            ['main_window.py'],
            pathex=[],
            binaries=[],
            datas=[('.env', '.')],
            hiddenimports=['PySide6.QtWidgets', 'PySide6.QtCore', 'google.oauth2.credentials'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='LogProcessor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch='arm64',
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='LogProcessor',
        )

        app = BUNDLE(
            coll,
            name='LogProcessor.app',
            icon=None,
            bundle_identifier='com.yourdomain.logprocessor',
            version='1.0.0',
            info_plist={
                'NSHighResolutionCapable': 'True',
                'LSMinimumSystemVersion': '11.0',
                'LSApplicationCategoryType': 'public.app-category.utilities',
                'CFBundlePackageType': 'APPL',
                'CFBundleSupportedPlatforms': ['MacOSX'],
                'CFBundleIdentifier': 'com.yourdomain.logprocessor',
                'CFBundleShortVersionString': '1.0.0',
                'CFBundleVersion': '1.0.0',
                'NSRequiresAquaSystemAppearance': 'False',
                'LSArchitecturePriority': ['arm64'],
            }
        )
        EOL
        
        # Build using the spec file
        pyinstaller LogProcessor.spec
        
    - name: Verify and fix app bundle
      run: |
        cd dist
        
        # Ensure all necessary files are present
        ls -la LogProcessor.app/Contents/MacOS/
        ls -la LogProcessor.app/Contents/Frameworks/ || mkdir -p LogProcessor.app/Contents/Frameworks/
        ls -la LogProcessor.app/Contents/Resources/
        
        # Copy any missing PySide6 plugins if needed
        cp -r /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/PySide6/plugins/* LogProcessor.app/Contents/MacOS/ || true
        
        # Create ZIP of the app
        zip -r LogProcessor-Mac-ARM64.zip LogProcessor.app
        
    - name: Upload Mac artifact
      uses: actions/upload-artifact@v4
      with:
        name: LogProcessor-Mac-ARM64
        path: dist/LogProcessor-Mac-ARM64.zip

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file
      env:
        GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      run: |
        echo "GOOGLE_CREDENTIALS_JSON='$env:GOOGLE_CREDENTIALS_JSON'" > .env
        
    - name: Build executable
      run: |
        pyinstaller --name=LogProcessor `
          --onefile `
          --windowed `
          --add-data ".env;." `
          --clean `
          --noconfirm `
          main_window.py
        
    - name: Create distribution ZIP
      run: |
        cd dist
        Compress-Archive -Path LogProcessor.exe, ../.env -DestinationPath LogProcessor-Windows.zip
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: LogProcessor-Windows
        path: dist/LogProcessor-Windows.zip
